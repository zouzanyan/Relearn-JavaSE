package 面向对象;


/*
* Java 中被 `static` 修饰的成员称为静态成员或类成员。它属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。静态成员可以使用类名直接访问，
* 也可以使用对象名进行访问。
* */


/*
* 被 `static` 修饰的方法是静态方法，静态方法不依赖于对象，不需要将类实例化便可以调用，由于不实例化也可以调用，所以不能有 `this`，也不能访问非静
* 态成员变量和非静态方法。但是非静态成员变量和非静态方法可以访问静态方法。
* */

/*
final关键字可以修饰类、方法、属性和变量
1. `final` 修饰类，则该类不允许被继承，为最终类
2. `final` 修饰方法，则该方法不允许被覆盖（重写）
3. `final` 修饰属性：则该类的属性不会进行隐式的初始化（类的初始化属性必须有值）或在构造方法中赋值（但只能选其一）
4. final 修饰变量，则该变量的值只能赋一次值，即常量
*/

public class Oop1 {
    public static String a = "awd";

    public static void main(String[] args) {
        System.out.println(Oop1.a); // 静态成员不需要实例化 直接就可以访问
        Oop1 oop1 = new Oop1();
        System.out.println(oop1.a); // 如果加上static关键字，上面的两种方法都可以使用
    }
}

/*
   访问修饰符的访问范围，比如 `private` 修饰的属性或者方法，只能在当前类中访问或者使用。`默认` 是什么修饰符都不加，默认在当前类中和同一包下都可以
   访问和使用。`protected` 修饰的属性或者方法，对同一包内的类和所有子类可见。`public` 修饰的属性或者方法，对所有类可见。
*/
